/* This file exists for documentation purpose only. */
/**
@defgroup  as68_prg   as68 program
@ingroup   devtools68

  MC68000 Macro Assembler.


@section licence LICENCE

  Copyright (C) 1993-2009 Vincent Penne and Benjamin Gerard

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


@section synopsis SYNOPSIS

  as68 [OPTION] \<in\> [-o \<out\>] [-s \<symbol\>]

@section description DESCRIPTION

  as68 is a very fast Motorola 68000 macro assembler.

@section options OPTIONS

  @arg @b -r              Do not produce relocation table (default)
  @arg @b -R              Produce relocation table
  @arg @b -p              No position independant code check (default)
  @arg @b -P              Warning position dependant addressing mode
  @arg @b -v              Disable verbose
  @arg @b -V              Enable Verbose (default)
  @arg @b -b[Kbytes]      Change code buffer (Kbytes is a number of Kbyte)
  @arg @b -s \<filename\> Set relocation table filename (def:<in>.rel)
  @arg @b -o \<filename\> Set output filename (def:<in>.bin) 


@section syntax ASSEMBLER SYNTAX

  as68 syntax is very close to hisoft genst(tm). 
  Except for some assembly directives are which are followed by a
  { ... } block. In other words it should be close enough to Motorola
  specifications.

  @subsection macrosyntax MACRO SYNTAX

    Following sample should demonstrate macro basic syntax.
  
    @code
    name MACRO
    {
    label_\\@:          ;\\@ is replaced by macro unic id (incremented number).
      move.l #\\1,\\2 ;\\1 is the first macro parameter, \\2 the second ...
    }
    @endcode

  @subsection controldirective ASSEMBLER CONTROL DIRECTIVES

    @arg @b ALIGN        [EXPR] Set align to given position
    @arg @b DEFAULT      [BYTE|WORD]  Set default opcode size
    @arg @b EVEN         Set align to next even position
    @arg @b IF           [EXPR] Start a conditionnal block
    @arg @b INCBIN       [FILE] Include binary file.
    @arg @b INCLUDE      [FILE] Include source file.
    @arg @b LOAD         [EXPR] Set load address (cross devel)
    @arg @b LS           [FILE] Load symbol
    @arg @b LST          [FILE] Load symbol 2!
    @arg @b ORG          [EXPR] Set assembly address.
    @arg @b PRINT        [EXPR] Output a message
    @arg @b RELOCATION   [on|off] Set relocation generation
    @arg @b REPEAT       Start a @b REPEAT ... @b UNTIL loop
    @arg @b RPT          as @b REPEAT
    @arg @b RSRESET      Reset current structure
    @arg @b RSSET        Add a field to current structure
    @arg @b RUN          [EXPR] Set run address (cross devel)
    @arg @b UNTIL cond   End a @b REPEAT ... @b UNTIL loop
    @arg @b WHILE        [EXPR] Start a while block


  @subsection reloctable RELOCATION TABLE

    Relocation table is a binary table containing the offset from the
    beginning of the long word (32bit) that need a relocation.
    Each offset is stored as a long word (obviously Motorola 32 bit
    big endian). The table ends by a offset equal to -1 (0xFFFFFFFF).

   @code
   ;
   ; Sample code to use as68 relocation table.
   ;
   ; a0: relocation table
   ; a1: binary
   reloc:
     move.l  (a0)+,d0
     cmp.l   #-1,d0
     beq.s   .finish
     add.l   a1,0(a1,d0.l)
     bra.s   reloc
   .finish:
     rts        
   @endcode


  @subsection strippingbss STRIPING BSS

    as68 does not handle sectionning. Anyway it assumes that BSS is all
    zeroed data at the end of the binary. Striping BSS means to remove
    this data even if it were not generated by a ds.x instruction.


  @section bugs BUGS

    Report to <benjihan -4t- users.sourceforge -d0t- net>

    @bug  Missing relocation.
    @bug  -P forces -R. @b org directive is disabled !!
    @bug  pea relatif PC, bugs with -P or -R
    @bug  symbol created by  xx = v are always lower case !
    @bug  label can not have an instruction name
    @bug  label can start at any column

   
  @section seealso SEE ALSO

    @see debug68_prg, sourcer68_prg

*/
